#!/bin/bash
# urldump
# Dump http(s) requests system-wide and from lan devices as well on a router.
#
# Uses mitmproxy so works for https too.
# iptables is used to transparently redirect all traffic to proxy.
# (Your nat tables will be flushed while this is running if you have any)
#
# Must be run as root.
# mitmdump can (should) be run as a different user, see below.
#
# more info:
#   https://github.com/lemonsqueeze/urldump

usage()
{
    echo "usage:  urldump [options]"
    echo ""
    echo "options:"
    echo "  --local         show local traffic only"
    echo "  --router        also capture traffic from lan devices behind router."
    echo "                  default: enabled if host is forwarding traffic"
    echo "  --user name	    user to run mitmproxy as"
    echo "  --mitmdump path specify mitmdump location"
    echo ""
    echo "if mitmdump fails try installing recent mitmproxy package (7.0.3)"
    exit 1
}

die()   {  echo "urldump:" "$@" 1>&2; exit 1;  }

mitmdump="mitmdump"

# save arguments
args="$@"

while [ "${1#-}" != "$1" ]; do
    opt="$1"; shift
    [ "$opt" = "--help" ] && usage
    [ "$opt" = "-h" ]    && usage

    if [ "$opt" = "--mitmdump" ]; then
	mitmdump="$1"; shift
    fi
    
    # skip others, only care about --mitmdump here
    [ "$opt" = "--user" ] && shift
done

# we need mitmproxy wrapper script
mitmproxy_wrapper="mitmproxy_wrapper"
if ! type "$mitmproxy_wrapper" >/dev/null 2>&1; then
    dir="${BASH_SOURCE%/*}"
    mitmproxy_wrapper="$dir/mitmproxy_wrapper"
    type "$mitmproxy_wrapper" >/dev/null 2>&1 || die "mitmproxy_wrapper not found"
fi

if ! type "$mitmdump" >/dev/null 2>&1; then
    die "mitmdump command not found '$mitmdump'"
fi

# mitmdump command
cmd="$mitmdump --mode transparent --showhost"	# transparent proxy  (recent mitmproxy versions)
#cmd="mitmdump -T --host"			# transparent proxy  (old mitmproxy versions)

$mitmproxy_wrapper "$@" $cmd | grep --line-buffered ' http'  | cut -d\  -f3-

